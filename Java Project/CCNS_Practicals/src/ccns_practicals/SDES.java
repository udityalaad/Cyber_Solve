/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ccns_practicals;

import java.util.Arrays;

/**
 *
 * @author Uditya
 */
public class SDES extends javax.swing.JFrame {
    int K1[];
    int K2[];
    
    int P10_TABLE[] = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
    int P8_TABLE[] = {6, 3, 7, 4, 8, 5, 10, 9};
    
    int IP_TABLE[] = {2, 6, 3, 1, 4, 8, 5, 7};
    int IP_INVERSE_TABLE[] = {4, 1, 3, 5, 7, 2, 8, 6};
    
    int EP_TABLE[] = {4, 1, 2, 3, 2, 3, 4, 1};
    
    int P4_TABLE[] = {2, 4, 3, 1};
    
    int SO[][] = {{01, 00, 11, 10},
        {11, 10, 01, 00},
        {00, 10, 01, 11},
        {11, 01, 00, 11}};
    
    int S1[][] = {{00, 01, 10, 11},
        {10, 00, 01, 11},
        {11, 00, 01, 00},
        {10, 01, 00, 11}};
    
    
    /**
     * Creates new form SDES
     */
    public SDES() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        Encrypted_CT = new javax.swing.JTextField();
        Decrypted_PT = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        PT = new javax.swing.JTextField();
        Key = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        CT = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        K1_Value = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        K2_Value = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Cipher Text");

        Encrypted_CT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Encrypted_CTActionPerformed(evt);
            }
        });

        Decrypted_PT.setToolTipText("");

        jLabel3.setText("Cipher Text");

        jButton1.setText("Find Cipher Text");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Plain Text");

        jButton2.setText("Find Plain Text");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Key");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Simplified DES");

        CT.setToolTipText("");
        CT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CTActionPerformed(evt);
            }
        });

        jButton3.setText("Go Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Plain Text");

        jLabel7.setText("K1");

        K1_Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                K1_ValueActionPerformed(evt);
            }
        });

        jLabel8.setText("K2");

        K2_Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                K2_ValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(299, 299, 299))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(Key, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(171, 171, 171))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(PT, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(78, 78, 78)
                                        .addComponent(jButton1)))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addGap(83, 83, 83))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CT, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(270, 270, 270)
                                    .addComponent(jButton3))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Encrypted_CT, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(59, 59, 59)
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(Decrypted_PT, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel7)
                        .addGap(10, 10, 10)
                        .addComponent(K1_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(K2_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(30, 30, 30)
                        .addComponent(jButton2))
                    .addComponent(CT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(K1_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(K2_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Encrypted_CT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(Decrypted_PT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(jButton3)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Encrypted_CTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Encrypted_CTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Encrypted_CTActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int result[] = Encrypt_Decrypt(String_To_Int_Array(PT.getText()), "Encrypt", String_To_Int_Array(Key.getText()));
        
        String s = "";
        for (int i = 0; i < result.length; i++) {
            s += Integer.toString(result[i]) + " ";
        }
        
        Encrypted_CT.setText(s);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        int result[] = Encrypt_Decrypt(String_To_Int_Array(CT.getText()), "Decrypt", String_To_Int_Array(Key.getText()));
        
        String s = "";
        for (int i = 0; i < result.length; i++) {
            s += Integer.toString(result[i]) + " ";
        }
        
        Decrypted_PT.setText(s);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void CTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CTActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        setVisible(false);
        new Main_Page().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void K1_ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_K1_ValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_K1_ValueActionPerformed

    private void K2_ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_K2_ValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_K2_ValueActionPerformed

    
    
    
    int[] String_To_Int_Array (String s) {
        String string_array[] = s.split(" ");
        
        int int_array[] = new int[string_array.length];
        
        for (int i = 0; i < int_array.length; i++) {
            int_array[i] = Integer.parseInt(string_array[i]);
        }
        
        return int_array;
    }
    
    
    
    void Generate_Keys (int key[]) {
        int p10[] = map_table(key, P10_TABLE);
        
        int p10_left_shift_1[] = Left_Shift(p10, 1);
        K1 = map_table(p10_left_shift_1, P8_TABLE);
        
        int p10_left_shift_2[] = Left_Shift(p10_left_shift_1, 2);
        K2 = map_table(p10_left_shift_2, P8_TABLE);
        
        
        System.out.print("\n\nGenrated Keys: ");
        
        System.out.print("\n\tK1: ");
        String s = "";
        for (int e : K1) {
            System.out.print(e);
            s += e + " ";
        }
        K1_Value.setText(s);
        
        
        s = "";
        System.out.print("\n\tK2: ");
        for (int e : K2) {
            System.out.print(e);
            s += e + " ";
        }
        K2_Value.setText(s);
    }
    
    
    
    int[] map_table (int input[], int table[]) {
        int output[] = new int[table.length];
        
        for (int i = 0; i < table.length; i++) {
            output[i] = input[table[i] - 1];
        }
        
        return output;
    }
    
    
    
    int[] Left_Shift (int input[], int shift) {
        int Group_Size = 5;
        int output[] = new int[input.length];
        
        for (int i = 0; i < (input.length/Group_Size); i++) {
            for (int j = 0; j < Group_Size; j++) {
                output[(Group_Size * i) + j]  =  input[(((Group_Size * i) + (j + shift)) % 5) + (i * Group_Size)];
            }
        }
        
        return output;
    }
    
    
    int[] Encrypt_Decrypt (int PT[], String operation, int Key[]) {
        Generate_Keys(Key);
        
        int k1[] = {};
        int k2[] = {};
        
        if (operation.equals("Encrypt")) {
            System.out.print("\n\nEncryption:");
            
            k1 = Arrays.copyOf(K1, K1.length);
            k2 = Arrays.copyOf(K2, K2.length);
        }
        else if (operation.equals("Decrypt")) {
            System.out.print("\n\n\nDecryption:");
            
            k1 = Arrays.copyOf(K2, K2.length);
            k2 = Arrays.copyOf(K1, K1.length);
        }
        
        
        int IP_PT[] = map_table(PT, IP_TABLE);
        System.out.print("\n\tIP(PT) = ");
        for (int e : IP_PT) {
            System.out.print(e);
        }
        
        int EP_IP_2[] = map_table(Arrays.copyOfRange(IP_PT, 4, 8), EP_TABLE);
        System.out.print("\n\tEP_IP_2 = ");
        for (int e : EP_IP_2) {
            System.out.print(e);
        }
        
        
        
        int EP_xor_K1[] = XOR(EP_IP_2, k1);
        if (operation.equals("Encrypt")) {
            System.out.print("\n\n\tEP_Part_2 XOR K1 = ");
        }
        else if (operation.equals("Decrypt")) {
            System.out.print("\n\tEP_Part_2 XOR K2 = ");
        }
        for (int e : EP_xor_K1) {
            System.out.print(e);
        }
        
        int s0_1[] = Arrays.copyOfRange(EP_xor_K1, 0, 4);
        int s0_row_1[] = {s0_1[0], s0_1[3]};
        int s0_col_1[] = {s0_1[1], s0_1[2]};
        int s0_xy_1 = SO[Binary_To_Int(s0_row_1)][Binary_To_Int(s0_col_1)];
        
        int s1_1[] = Arrays.copyOfRange(EP_xor_K1, 4, 8);
        int s1_row_1[] = {s1_1[0], s1_1[3]};
        int s1_col_1[] = {s1_1[1], s1_1[2]};
        int s1_xy_1 = S1[Binary_To_Int(s1_row_1)][Binary_To_Int(s1_col_1)];
        
        int temp_1[] = {s0_xy_1 / 10, s0_xy_1 % 10, s1_xy_1 / 10, s1_xy_1 % 10};
        System.out.print("\n\tTemp = ");
        for (int e : temp_1) {
            System.out.print(e);
        }
        
        int p4_temp_1[] = map_table(temp_1, P4_TABLE);
        System.out.print("\n\tP4(Temp) = ");
        for (int e : p4_temp_1) {
            System.out.print(e);
        }
        
        
        int SW_1[] = XOR(Arrays.copyOfRange(IP_PT, 0, 4), p4_temp_1);
        System.out.print("\n\tSW = ");
        for (int e : SW_1) {
            System.out.print(e);
        }
        
        
        
        int EP_SW_1[] = map_table(SW_1, EP_TABLE);
        System.out.print("\n\n\tEP(SW) = ");
        for (int e : EP_SW_1) {
            System.out.print(e);
        }
        
        
        int EP_xor_K2[] = XOR(EP_SW_1, k2);
        if (operation.equals("Encrypt")) {
            System.out.print("\n\tEP_Part_2 XOR K2 = ");
        }
        else if (operation.equals("Decrypt")) {
            System.out.print("\n\tEP_Part_2 XOR K1 = ");
        }
        for (int e : EP_xor_K2) {
            System.out.print(e);
        }
        
        int s0_2[] = Arrays.copyOfRange(EP_xor_K2, 0, 4);
        int s0_row_2[] = {s0_2[0], s0_2[3]};
        int s0_col_2[] = {s0_2[1], s0_2[2]};
        int s0_xy_2 = SO[Binary_To_Int(s0_row_2)][Binary_To_Int(s0_col_2)];
        
        int s1_2[] = Arrays.copyOfRange(EP_xor_K2, 4, 8);
        int s1_row_2[] = {s1_2[0], s1_2[3]};
        int s1_col_2[] = {s1_2[1], s1_2[2]};
        int s1_xy_2 = S1[Binary_To_Int(s1_row_2)][Binary_To_Int(s1_col_2)];
        
        int temp_2[] = {s0_xy_2 / 10, s0_xy_2 % 10, s1_xy_2 / 10, s1_xy_2 % 10};
        System.out.print("\n\tTemp = ");
        for (int e : temp_2) {
            System.out.print(e);
        }
        
        int p4_temp_2[] = map_table(temp_2, P4_TABLE);
        System.out.print("\n\tP4(Temp) = ");
        for (int e : p4_temp_2) {
            System.out.print(e);
        }
        
        int SW_2[] = XOR(Arrays.copyOfRange(IP_PT, 4, 8), p4_temp_2);
        System.out.print("\n\tSW = ");
        for (int e : SW_2) {
            System.out.print(e);
        }
        
        
        int temp_3[] = new int[SW_2.length + SW_1.length];
        System.arraycopy(SW_2, 0, temp_3, 0, SW_2.length);
        System.arraycopy(SW_1, 0, temp_3, SW_1.length, SW_2.length);
        System.out.print("\n\n\tTemp = ");
        for (int e : temp_3) {
            System.out.print(e);
        }
        
        
        int IP_inverse[] = map_table(temp_3, IP_INVERSE_TABLE);
        System.out.print("\n\tIP_Inverse(Temp) = ");
        for (int e : IP_inverse) {
            System.out.print(e);
        }
        
        return IP_inverse;
    }
    
    
    
    int[] XOR (int parameter_1[], int parameter_2[]) {
        int output[] = new int[parameter_1.length];
        
        for (int i = 0; i < parameter_1.length; i++) {
            if (parameter_1[i] == parameter_2[i]) {
                output[i] = 0;
            }
            else {
                output[i] = 1;
            }
        }
        
        return output;
    }
    
    
    int Binary_To_Int (int binary[]) {
        int integer = 0;
        
        int power = 0;
        for (int i = (binary.length - 1); i >= 0; i--) {
            integer += ((int) Math.pow(2, power)) * binary[i];
            
            power++;
        }
        
        return integer;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SDES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SDES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SDES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SDES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SDES().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CT;
    private javax.swing.JTextField Decrypted_PT;
    private javax.swing.JTextField Encrypted_CT;
    private javax.swing.JTextField K1_Value;
    private javax.swing.JTextField K2_Value;
    private javax.swing.JTextField Key;
    private javax.swing.JTextField PT;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables
}
